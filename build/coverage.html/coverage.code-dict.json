{"/home/travis/build/npmtest/node-npmtest-np/test.js":"/* istanbul instrument in package npmtest_np */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-np/lib.npmtest_np.js":"/* istanbul instrument in package npmtest_np */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_np = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_np = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-np/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-np && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_np */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_np\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_np.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_np.rollup.js'] =\n            local.assetsDict['/assets.npmtest_np.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_np.__dirname + '/lib.npmtest_np.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-np/node_modules/np/index.js":"'use strict';\nconst execa = require('execa');\nconst del = require('del');\nconst Listr = require('listr');\nconst split = require('split');\nrequire('any-observable/register/rxjs-all'); // eslint-disable-line import/no-unassigned-import\nconst Observable = require('any-observable');\nconst streamToObservable = require('stream-to-observable');\nconst readPkgUp = require('read-pkg-up');\nconst hasYarn = require('has-yarn');\nconst prerequisiteTasks = require('./lib/prerequisite');\nconst gitTasks = require('./lib/git');\nconst util = require('./lib/util');\n\nconst exec = (cmd, args) => {\n\t// Use `Observable` support if merged https://github.com/sindresorhus/execa/pull/26\n\tconst cp = execa(cmd, args);\n\n\treturn Observable.merge(\n\t\tstreamToObservable(cp.stdout.pipe(split()), {await: cp}),\n\t\tstreamToObservable(cp.stderr.pipe(split()), {await: cp})\n\t).filter(Boolean);\n};\n\nmodule.exports = (input, opts) => {\n\tinput = input || 'patch';\n\n\topts = Object.assign({\n\t\tcleanup: true,\n\t\tpublish: true,\n\t\tyarn: hasYarn()\n\t}, opts);\n\n\tif (!hasYarn() && opts.yarn) {\n\t\tthrow new Error('Could not use Yarn without yarn.lock file');\n\t}\n\n\t// TODO: remove sometime far in the future\n\tif (opts.skipCleanup) {\n\t\topts.cleanup = false;\n\t}\n\n\tconst runTests = !opts.yolo;\n\tconst runCleanup = opts.cleanup && !opts.yolo;\n\tconst runPublish = opts.publish;\n\tconst pkg = util.readPkg();\n\n\tconst tasks = new Listr([\n\t\t{\n\t\t\ttitle: 'Prerequisite check',\n\t\t\ttask: () => prerequisiteTasks(input, pkg, opts)\n\t\t},\n\t\t{\n\t\t\ttitle: 'Git',\n\t\t\ttask: () => gitTasks(opts)\n\t\t}\n\t], {\n\t\tshowSubtasks: false\n\t});\n\n\tif (runCleanup) {\n\t\ttasks.add([\n\t\t\t{\n\t\t\t\ttitle: 'Cleanup',\n\t\t\t\ttask: () => del('node_modules')\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Installing dependencies using Yarn',\n\t\t\t\tenabled: () => opts.yarn === true,\n\t\t\t\ttask: () => exec('yarn', ['install'])\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'Installing dependencies using npm',\n\t\t\t\tenabled: () => opts.yarn === false,\n\t\t\t\ttask: () => exec('npm', ['install'])\n\t\t\t}\n\t\t]);\n\t}\n\n\tif (runTests) {\n\t\ttasks.add({\n\t\t\ttitle: 'Running tests',\n\t\t\ttask: () => exec('npm', ['test'])\n\t\t});\n\t}\n\n\ttasks.add({\n\t\ttitle: 'Bumping version',\n\t\ttask: () => exec('npm', ['version', input])\n\t});\n\n\tif (runPublish) {\n\t\ttasks.add({\n\t\t\ttitle: 'Publishing package',\n\t\t\tskip: () => {\n\t\t\t\tif (pkg.private) {\n\t\t\t\t\treturn 'Private package: not publishing to npm.';\n\t\t\t\t}\n\t\t\t},\n\t\t\ttask: () => exec('npm', ['publish'].concat(opts.tag ? ['--tag', opts.tag] : []))\n\t\t});\n\t}\n\n\ttasks.add({\n\t\ttitle: 'Pushing tags',\n\t\ttask: () => exec('git', ['push', '--follow-tags'])\n\t});\n\n\treturn tasks.run()\n\t\t.then(() => readPkgUp())\n\t\t.then(result => result.pkg);\n};\n","/home/travis/build/npmtest/node-npmtest-np/node_modules/npm-run-path/index.js":"'use strict';\nconst path = require('path');\nconst pathKey = require('path-key');\n\nmodule.exports = opts => {\n\topts = Object.assign({\n\t\tcwd: process.cwd(),\n\t\tpath: process.env[pathKey()]\n\t}, opts);\n\n\tlet prev;\n\tlet pth = path.resolve(opts.cwd);\n\tconst ret = [];\n\n\twhile (prev !== pth) {\n\t\tret.push(path.join(pth, 'node_modules/.bin'));\n\t\tprev = pth;\n\t\tpth = path.resolve(pth, '..');\n\t}\n\n\t// ensure the running `node` binary is used\n\tret.push(path.dirname(process.execPath));\n\n\treturn ret.concat(opts.path).join(path.delimiter);\n};\n\nmodule.exports.env = opts => {\n\topts = Object.assign({\n\t\tenv: process.env\n\t}, opts);\n\n\tconst env = Object.assign({}, opts.env);\n\tconst path = pathKey({env});\n\n\topts.path = env[path];\n\tenv[path] = module.exports(opts);\n\n\treturn env;\n};\n","/home/travis/build/npmtest/node-npmtest-np/node_modules/np/lib/prerequisite.js":"'use strict';\nconst execa = require('execa');\nconst Listr = require('listr');\nconst version = require('./version');\n\nmodule.exports = (input, pkg, opts) => {\n\tlet newVersion = null;\n\n\tconst tasks = [\n\t\t{\n\t\t\ttitle: 'Validate version',\n\t\t\ttask: () => {\n\t\t\t\tif (!version.isValidVersionInput(input)) {\n\t\t\t\t\tthrow new Error(`Version should be either ${version.SEMVER_INCREMENTS.join(', ')}, or a valid semver version.`);\n\t\t\t\t}\n\n\t\t\t\tnewVersion = version.getNewVersion(pkg.version, input);\n\n\t\t\t\tif (!version.isVersionGreater(pkg.version, newVersion)) {\n\t\t\t\t\tthrow new Error(`New version \\`${newVersion}\\` should be higher than current version \\`${pkg.version}\\``);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\ttitle: 'Check for pre-release version',\n\t\t\tenabled: () => opts.publish,\n\t\t\ttask: () => {\n\t\t\t\tif (!pkg.private && version.isPrereleaseVersion(newVersion) && !opts.tag) {\n\t\t\t\t\tthrow new Error('You must specify a dist-tag using --tag when publishing a pre-release version. This prevents accidentally tagging unstable versions as \"latest\". https://docs.npmjs.com/cli/dist-tag');\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\ttitle: 'Check npm version',\n\t\t\tskip: () => version.isVersionLower('6.0.0', process.version),\n\t\t\ttask: () => execa.stdout('npm', ['version', '--json']).then(json => {\n\t\t\t\tconst versions = JSON.parse(json);\n\t\t\t\tif (!version.satisfies(versions.npm, '>=2.15.8 <3.0.0 || >=3.10.1')) {\n\t\t\t\t\tthrow new Error(`npm@${versions.npm} has known issues publishing when running Node.js 6. Please upgrade npm or downgrade Node and publish again. https://github.com/npm/npm/issues/5082`);\n\t\t\t\t}\n\t\t\t})\n\t\t},\n\t\t{\n\t\t\ttitle: 'Check yarn.lock integrity',\n\t\t\tenabled: () => opts.yarn,\n\t\t\ttask: () => execa.stdout('yarn', ['check', '--integrity'])\n\t\t\t\t.catch(err => {\n\t\t\t\t\tif (err.code === 'ENOENT') {\n\t\t\t\t\t\tthrow new Error('Yarn not available, run `npm install -g yarn` to install or use the `--no-yarn` flag');\n\t\t\t\t\t}\n\n\t\t\t\t\tthrow new Error('`yarn.lock` file is outdated, run `yarn`, commit your changes and try again');\n\t\t\t\t})\n\t\t},\n\t\t{\n\t\t\ttitle: 'Check git tag existence',\n\t\t\ttask: () => execa('git', ['fetch'])\n\t\t\t\t.then(() => execa.stdout('git', ['rev-parse', '--quiet', '--verify', `refs/tags/v${newVersion}`]))\n\t\t\t\t.then(\n\t\t\t\t\toutput => {\n\t\t\t\t\t\tif (output) {\n\t\t\t\t\t\t\tthrow new Error(`Git tag \\`v${newVersion}\\` already exists.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\terr => {\n\t\t\t\t\t\t// Command fails with code 1 and no output if the tag does not exist, even though `--quiet` is provided\n\t\t\t\t\t\t// https://github.com/sindresorhus/np/pull/73#discussion_r72385685\n\t\t\t\t\t\tif (err.stdout !== '' || err.stderr !== '') {\n\t\t\t\t\t\t\tthrow err;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t}\n\t];\n\n\treturn new Listr(tasks);\n};\n","/home/travis/build/npmtest/node-npmtest-np/node_modules/np/lib/version.js":"'use strict';\nconst semver = require('semver');\n\nexports.SEMVER_INCREMENTS = ['patch', 'minor', 'major', 'prepatch', 'preminor', 'premajor', 'prerelease'];\nexports.PRERELEASE_VERSIONS = ['prepatch', 'preminor', 'premajor', 'prerelease'];\n\nconst isValidVersion = input => Boolean(semver.valid(input));\n\nexports.isValidVersionInput = input => exports.SEMVER_INCREMENTS.indexOf(input) !== -1 || isValidVersion(input);\n\nexports.isPrereleaseVersion = version => exports.PRERELEASE_VERSIONS.indexOf(version) !== -1 || Boolean(semver.prerelease(version));\n\nexports.getNewVersion = (oldVersion, input) => {\n\tif (!exports.isValidVersionInput(input)) {\n\t\tthrow new Error(`Version should be either ${exports.SEMVER_INCREMENTS.join(', ')} or a valid semver version.`);\n\t}\n\n\treturn exports.SEMVER_INCREMENTS.indexOf(input) === -1 ? input : semver.inc(oldVersion, input);\n};\n\nexports.isVersionGreater = (oldVersion, newVersion) => {\n\tif (!isValidVersion(newVersion)) {\n\t\tthrow new Error('Version should be a valid semver version.');\n\t}\n\n\treturn semver.gt(newVersion, oldVersion);\n};\n\nexports.isVersionLower = (oldVersion, newVersion) => {\n\tif (!isValidVersion(newVersion)) {\n\t\tthrow new Error('Version should be a valid semver version.');\n\t}\n\n\treturn semver.lt(newVersion, oldVersion);\n};\n\nexports.satisfies = (version, range) => semver.satisfies(version, range);\n","/home/travis/build/npmtest/node-npmtest-np/node_modules/np/lib/git.js":"'use strict';\nconst execa = require('execa');\nconst Listr = require('listr');\n\nmodule.exports = opts => {\n\tconst tasks = [\n\t\t{\n\t\t\ttitle: 'Check current branch',\n\t\t\ttask: () => execa.stdout('git', ['symbolic-ref', '--short', 'HEAD']).then(branch => {\n\t\t\t\tif (branch !== 'master') {\n\t\t\t\t\tthrow new Error('Not on `master` branch. Use --any-branch to publish anyway.');\n\t\t\t\t}\n\t\t\t})\n\t\t},\n\t\t{\n\t\t\ttitle: 'Check local working tree',\n\t\t\ttask: () => execa.stdout('git', ['status', '--porcelain']).then(status => {\n\t\t\t\tif (status !== '') {\n\t\t\t\t\tthrow new Error('Unclean working tree. Commit or stash changes first.');\n\t\t\t\t}\n\t\t\t})\n\t\t},\n\t\t{\n\t\t\ttitle: 'Check remote history',\n\t\t\ttask: () => execa.stdout('git', ['rev-list', '--count', '--left-only', '@{u}...HEAD']).then(result => {\n\t\t\t\tif (result !== '0') {\n\t\t\t\t\tthrow new Error('Remote history differs. Please pull changes.');\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t];\n\n\tif (opts.anyBranch) {\n\t\ttasks.shift();\n\t}\n\n\treturn new Listr(tasks);\n};\n","/home/travis/build/npmtest/node-npmtest-np/node_modules/np/lib/util.js":"'use strict';\nconst readPkgUp = require('read-pkg-up');\n\nexports.readPkg = () => {\n\tconst pkg = readPkgUp.sync().pkg;\n\n\tif (!pkg) {\n\t\tthrow new Error(`No package.json found. Make sure you're in the correct project.`);\n\t}\n\n\treturn pkg;\n};\n","/home/travis/build/npmtest/node-npmtest-np/node_modules/np/cli.js":"#!/usr/bin/env node\n'use strict';\nconst logSymbols = require('log-symbols');\nconst meow = require('meow');\nconst updateNotifier = require('update-notifier');\nconst version = require('./lib/version');\nconst ui = require('./lib/ui');\nconst np = require('./');\n\nconst cli = meow(`\n\tUsage\n\t  $ np <version>\n\n\t  Version can be:\n\t    ${version.SEMVER_INCREMENTS.join(' | ')} | 1.2.3\n\n\tOptions\n\t  --any-branch  Allow publishing from any branch\n\t  --no-cleanup  Skips cleanup of node_modules\n\t  --yolo        Skips cleanup and testing\n\t  --no-publish  Skips publishing\n\t  --tag         Publish under a given dist-tag\n\t  --no-yarn     Don't use Yarn\n\n\tExamples\n\t  $ np\n\t  $ np patch\n\t  $ np 1.0.2\n\t  $ np 1.0.2-beta.3 --tag=beta\n`);\n\nupdateNotifier({pkg: cli.pkg}).notify();\n\nPromise\n\t.resolve()\n\t.then(() => {\n\t\tif (cli.input.length > 0) {\n\t\t\treturn Object.assign({}, cli.flags, {\n\t\t\t\tconfirm: true,\n\t\t\t\tversion: cli.input[0]\n\t\t\t});\n\t\t}\n\n\t\treturn ui(cli.flags);\n\t})\n\t.then(options => {\n\t\tif (!options.confirm) {\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\treturn options;\n\t})\n\t.then(options => np(options.version, options))\n\t.then(pkg => {\n\t\tconsole.log(`\\n ${pkg.name} ${pkg.version} published 🎉`);\n\t})\n\t.catch(err => {\n\t\tconsole.error(`\\n${logSymbols.error} ${err.message}`);\n\t\tprocess.exit(1);\n\t});\n","/home/travis/build/npmtest/node-npmtest-np/node_modules/np/lib/ui.js":"'use strict';\nconst execa = require('execa');\nconst inquirer = require('inquirer');\nconst chalk = require('chalk');\nconst util = require('./util');\nconst version = require('./version');\n\nfunction prettyVersionDiff(oldVersion, inc) {\n\tconst newVersion = version.getNewVersion(oldVersion, inc).split('.');\n\toldVersion = oldVersion.split('.');\n\tlet firstVersionChange = false;\n\tconst output = [];\n\n\tfor (let i = 0; i < newVersion.length; i++) {\n\t\tif ((newVersion[i] !== oldVersion[i] && !firstVersionChange)) {\n\t\t\toutput.push(`${chalk.dim.cyan(newVersion[i])}`);\n\t\t\tfirstVersionChange = true;\n\t\t} else if (newVersion[i].indexOf('-') >= 1) {\n\t\t\tlet preVersion = [];\n\t\t\tpreVersion = newVersion[i].split('-');\n\t\t\toutput.push(`${chalk.dim.cyan(`${preVersion[0]}-${preVersion[1]}`)}`);\n\t\t} else {\n\t\t\toutput.push(chalk.reset.dim(newVersion[i]));\n\t\t}\n\t}\n\treturn output.join(chalk.reset.dim('.'));\n}\n\nmodule.exports = options => {\n\tconst pkg = util.readPkg();\n\tconst oldVersion = pkg.version;\n\n\tconsole.log(`\\nPublish a new version of ${chalk.bold.magenta(pkg.name)} ${chalk.dim(`(${oldVersion})`)}\\n`);\n\n\tconst prompts = [\n\t\t{\n\t\t\ttype: 'list',\n\t\t\tname: 'version',\n\t\t\tmessage: 'Select semver increment or specify new version',\n\t\t\tpageSize: version.SEMVER_INCREMENTS.length + 2,\n\t\t\tchoices: version.SEMVER_INCREMENTS\n\t\t\t\t.map(inc => ({\n\t\t\t\t\tname: `${inc} \t${prettyVersionDiff(oldVersion, inc)}`,\n\t\t\t\t\tvalue: inc\n\t\t\t\t}))\n\t\t\t\t.concat([\n\t\t\t\t\tnew inquirer.Separator(),\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Other (specify)',\n\t\t\t\t\t\tvalue: null\n\t\t\t\t\t}\n\t\t\t\t]),\n\t\t\tfilter: input => version.isValidVersionInput(input) ? version.getNewVersion(oldVersion, input) : input\n\t\t},\n\t\t{\n\t\t\ttype: 'input',\n\t\t\tname: 'version',\n\t\t\tmessage: 'Version',\n\t\t\twhen: answers => !answers.version,\n\t\t\tfilter: input => version.isValidVersionInput(input) ? version.getNewVersion(pkg.version, input) : input,\n\t\t\tvalidate: input => {\n\t\t\t\tif (!version.isValidVersionInput(input)) {\n\t\t\t\t\treturn 'Please specify a valid semver, for example, `1.2.3`. See http://semver.org';\n\t\t\t\t} else if (!version.isVersionGreater(oldVersion, input)) {\n\t\t\t\t\treturn `Version must be greater than ${oldVersion}`;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\ttype: 'list',\n\t\t\tname: 'tag',\n\t\t\tmessage: 'How should this pre-release version be tagged in npm?',\n\t\t\twhen: answers => !pkg.private && version.isPrereleaseVersion(answers.version) && !options.tag,\n\t\t\tchoices: () => execa.stdout('npm', ['view', '--json', pkg.name, 'dist-tags'])\n\t\t\t\t.then(stdout => {\n\t\t\t\t\tconst existingPrereleaseTags = Object.keys(JSON.parse(stdout))\n\t\t\t\t\t\t.filter(tag => tag !== 'latest');\n\n\t\t\t\t\tif (existingPrereleaseTags.length === 0) {\n\t\t\t\t\t\texistingPrereleaseTags.push('next');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn existingPrereleaseTags\n\t\t\t\t\t\t.concat([\n\t\t\t\t\t\t\tnew inquirer.Separator(),\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Other (specify)',\n\t\t\t\t\t\t\t\tvalue: null\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]);\n\t\t\t\t})\n\t\t},\n\t\t{\n\t\t\ttype: 'input',\n\t\t\tname: 'tag',\n\t\t\tmessage: 'Tag',\n\t\t\twhen: answers => !pkg.private && version.isPrereleaseVersion(answers.version) && !options.tag && !answers.tag,\n\t\t\tvalidate: input => {\n\t\t\t\tif (input.length === 0) {\n\t\t\t\t\treturn 'Please specify a tag, for example, `next`.';\n\t\t\t\t} else if (input.toLowerCase() === 'latest') {\n\t\t\t\t\treturn 'It\\'s not possible to publish pre-releases under the `latest` tag. Please specify something else, for example, `next`.';\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\ttype: 'confirm',\n\t\t\tname: 'confirm',\n\t\t\tmessage: answers => {\n\t\t\t\tconst tag = answers.tag || options.tag;\n\t\t\t\tconst tagPart = tag ? ` and tag this release in npm as ${tag}` : '';\n\n\t\t\t\treturn `Will bump from ${chalk.cyan(oldVersion)} to ${chalk.cyan(answers.version + tagPart)}. Continue?`;\n\t\t\t}\n\t\t}\n\t];\n\n\treturn inquirer\n\t\t.prompt(prompts)\n\t\t.then(answers => Object.assign({}, options, answers));\n};\n"}